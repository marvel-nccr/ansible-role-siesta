---
# see https://pelios.csx.cam.ac.uk/~mc321/siesta.html
- name: Install siesta dependencies
  become: true
  become_user: "{{ root_user }}"
  apt:
    name:
      - gfortran
      - openmpi-common
      - openmpi-bin
      - libopenmpi-dev
      - libblacs-mpi-dev
      - libnetcdf-dev
      - netcdf-bin
      - libnetcdff-dev
      - libscalapack-mpi-dev
      - libblas-dev
      - liblapack-dev

- name: Get siesta source
  get_url:
    url: "{{ siesta_url }}"
    dest: "{{ siesta_code_folder }}/{{ siesta_src_archive }}"
  register: siesta_download

- name: Extract siesta source
  unarchive:
    src: "{{ siesta_download.dest }}"
    dest: "{{ siesta_code_folder }}"
    remote_src: true

- name: create Makefile
  shell: ../Src/obj_setup.sh
  args:
    chdir: "{{ siesta_topdir }}/Obj"
    creates: "{{ siesta_topdir }}/Obj/Makefile"

- name: copy arch.make
  template:
    src: arch.make.deb_or_ubuntu
    dest: "{{ siesta_topdir }}/Obj/arch.make"

- name: Make siesta executables
  shell: "make"
  args:
    chdir: "{{ siesta_topdir }}/Obj"
    creates: "{{ siesta_topdir }}/Obj/siesta"
  register: siesta_make

- import_tasks: tests.yml
  when: siesta_make.changed and run_tests is defined and run_tests

- name: "Put a line in ~/.profile to add siesta to the path"
  lineinfile:
    path: "${HOME}/.profile"
    line: "export PATH=${PATH}:{{ siesta_topdir }}/Obj"

- include_role:
    name: release_notes
  vars:
    section: "siesta"
    option: "version"
    value: "{{ siesta_version }}"
  when: release_notes is defined and release_notes

- include_role:
    name: release_notes
  vars:
    section: "siesta"
    option: "usage"
    value: >-
      siesta is compiled and installed in {{ siesta_topdir }}.
      simply run 'siesta'
  when: release_notes is defined and release_notes
